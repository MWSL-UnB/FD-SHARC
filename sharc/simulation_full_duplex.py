# -*- coding: utf-8 -*-
"""
Created on Tue Sep 12 17:21:06 2017

@author: Calil
"""

import numpy as np
import math

from sharc.simulation import Simulation
from sharc.parameters.parameters import Parameters
from sharc.station_factory import StationFactory

class SimulationFullDuplex(Simulation):
    """
    Implements the full duplex simulation
    """

    def __init__(self, parameters: Parameters):
        super().__init__(parameters)

        
    def snapshot(self, *args, **kwargs):
        write_to_file = kwargs["write_to_file"]
        snapshot_number = kwargs["snapshot_number"]
        
        # In case of hotspots, base stations coordinates have to be calculated
        # on every snapshot. Anyway, let topology decide whether to calculate
        # or not
        self.topology.calculate_coordinates()
        
        # Create the base stations (remember that it takes into account the
        # network load factor)
        self.bs = StationFactory.generate_imt_base_stations(self.parameters.imt,
                                                            self.parameters.antenna_imt,
                                                            self.topology)      
        
        # Create the other system (FSS, HAPS, etc...)
        self.system = StationFactory.generate_system(self.parameters)

        # Create IMT user equipments
        self.ue = StationFactory.generate_imt_ue(self.parameters.imt,
                                                 self.parameters.antenna_imt,
                                                 self.topology)
        #self.plot_scenario()
        
        self.connect_ue_to_bs()
        self.select_ue()
        
        # Calculate coupling loss after beams are created
        self.coupling_loss_imt = self.calculate_coupling_loss(self.bs, 
                                                              self.ue,
                                                              self.propagation_imt)
        
        # Scheduler which divides the band equally among BSs and UEs
        self.scheduler()


    def power_control(self):
        pass
    
        
    def calculate_sinr(self):
        """
        Calculates the downlink and uplink SINR for each UE and BS.
        Self-interference is considered
        """        
        pass

        
    def calculate_sinr_ext(self):
        """
        Calculates the SINR and INR for each UE and BS taking into
        account the interference that is generated by the other system into 
        IMT system.
        """
        pass
        
        
    def calculate_external_interference(self):
        """
        Calculates interference that IMT system generates on other system
        """
        pass
        
        
    def collect_results(self, write_to_file: bool, snapshot_number: int):
        pass

